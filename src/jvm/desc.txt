
//jvm
    内存与垃圾回收
    字节码与类的加载
    性能监控与调优
    大厂面试

    1.类加载系统    读取class文件
        1.三种类加载器   引导类加载器(bootstrapClassLoader)\扩展类加载器\系统类加载器
             bootStrap  classloader是c/c++ 写的  因此不能java代码不能获取到   用来加载java核心库
             扩展类加载器  和 系统类加载器(应用程序类加载器)  都是继承于classloader
             扩展类加载器 加载 ext文件夹下的类名
             自定义类获取都都是系统类加载器
                 自定义类加载器的应用场景 防止其他人根据字节码文件进行反编译  可以添加解密功能
                 自定义类的加载器  可以继承classloader 重写 findClass 方法
         2.双亲委派机制
             看上一级是否加载  具体到例子中就是   首先是系统类加载器  询问 扩展类加载器   扩展类加载器询问引导类加在器
             引导类加载器(不加载)  ---> 扩展类加载器(不加载)--->系统类加载器
             优势： 防止类的重复加载,保护核心代码不被篡改
                    比如:自己自定义 java.lang.String类  如果没有双亲委派机制
                    那么会加载自定义的String类 这就破坏了核心类的完整性
    2.运行时数据区   堆  栈  方法区(实现)  本地方法区  pc寄存器
        (1)pc寄存器  保存的是下一指令的地址  线程私有   每个线程都有一个pc寄存器  记录各自下一个指令的地址
        (2)栈  线程私有  保存一个个栈帧  栈帧对应的是一个个方法  不存在gc 有可能oom(out of memory)
           1.出现 stackoverflow  或 outofmemory  异常怎么解决
            调整 栈的大小  使用-Xss
           2.栈帧的内部结构
                局部变量表(local variable)
                  数字数组  存储单位 slot
                操作数栈(operand stack)
                动态链接(dynamic linking)  运行时常量的引用
                    指向运行时常量池中方法的引用
                方法返回地址   方法正常退出或异常退出的定义
                一些附加信息
        (3)堆
          线程共享 调整堆的大小 -Xms

          工具命令行： jps、jconsole、jmap -heap 进程号、jvisualVm

          结构：
            新生代(1/3堆空间占比)：
                伊甸园(eden)
                幸存者0区(survivor 0\form)
                幸存者1区(survivor 1\to)
                eden:form:to = 8:1:1  空间比例
            老年代(tenure；2/3堆空间占比)：
            元空间(永久 1.8以前)：
            eden的gc为ygc(轻gc), tenure 为fullgc(重gc)

           引用
               强引用（Strong Reference）
               类似 "Object obj = new Object()" 这类的引用，就是强引用，只要强引用存在，
               垃圾收集器永远不会回收被引用的对象。但是，如果我们错误地保持了强引用，
               比如：赋值给了 static 变量，那么对象在很长一段时间内不会被回收，会产生内存泄漏。

           软引用（Soft Reference）
                软引用是一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，
                只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。
                JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。
                软引用通常用来实现内存敏感的缓存，如果还有空闲内存，就可以暂时保留缓存，
                当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。
                   缓存本地图片时  可以使用软引用或弱引用
           弱引用（Weak Reference）
                弱引用的强度比软引用更弱一些。当 JVM 进行垃圾回收时，无论内存是否充足，都会回收只被弱引用关联的对象。
                weakHashMap可以 使用缓存

           虚引用（Phantom Reference）
               虚引用也称幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，
               完全不会对其生存时间构成影响。它仅仅是提供了一种确保对象被 finalize 以后，
               做某些事情的机制，比如，通常用来做所谓的 Post-Mortem 清理机制。
           垃圾收集算法
             1.标记-清除算法
                标记的过程是：遍历所有的 GC Roots，然后将所有 GC Roots 可达的对象标记为存活的对象。
                清除的过程将遍历堆中所有的对象，将没有标记的对象全部清除掉。与此同时，清除那些被标记过的对象的标记，以便下次的垃圾回收。
                这种方法有两个不足：
                    效率问题：标记和清除两个过程的效率都不高。
                    空间问题：标记清除之后会产生大量不连续的内存碎片，碎片太多可能导致以后需要分配较大对象时，
                    无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。
             2.复制算法（新生代）
                为了解决效率问题，“复制”收集算法出现了。它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。
                当这一块内存用完，需要进行垃圾收集时，就将存活者的对象复制到另一块上面，然后将第一块内存全部清除。
                这种算法有优有劣：
                    优点：不会有内存碎片的问题。
                    缺点：内存缩小为原来的一半，浪费空间。
                为了解决空间利用率问题，可以将内存分为三块： Eden、From Survivor、To Survivor，比例是 8:1:1，
                每次使用 Eden 和其中一块 Survivor。回收时，将 Eden 和 Survivor 中还存活的对象一次性复制到另外一块 Survivor 空间上，
                最后清理掉 Eden 和刚才使用的 Survivor 空间。这样只有 10% 的内存被浪费。
                但是我们无法保证每次回收都只有不多于 10% 的对象存活，当 Survivor 空间不够，需要依赖其他内存（指老年代）进行分配担保。
             3.标记-整理算法（老年代）
                标记：它的第一个阶段与标记/清除算法是一模一样的，均是遍历 GC Roots，然后将存活的对象标记。
                整理：移动所有存活的对象，且按照内存地址次序依次排列，然后将末端内存地址以后的内存全部回收。
                因此，第二阶段才称为整理阶段。
             4.分代收集算法
                 新生代：复制算法
                 老年代：标记-清除算法、标记-整理算法

        (4)方法区(逻辑上是堆的一部分  其实不是)：
              class   classLoader 常量池
              方法区的实现  1.8以前 永久代 1.8 元空间 元空间使用本机物理内存
              查看字节码
              javap -v .class
              StringTable  是在运行时常量池中 存储的是指向String对象的索引，真实对象还是存储在堆中。
              方法区中存放生命周期较长的类信息、常量、静态变量，每次垃圾收集只有少量的垃圾被清除。
                  方法区中主要清除两种垃圾：
                      废弃常量
                         只要常量池中的常量不被任何变量或对象引用，那么这些常量就会被清除掉。
                         比如，一个字符串 "bingo" 进入了常量池，但是当前系统没有任何一个 String 对象引用常量池中的 "bingo" 常量，也没有其它地方引用这个字面量，必要的话，"bingo"常量会被清理出常量池。
                      无用的类
                         判定一个类是否是“无用的类”，条件较为苛刻。
                          1.该类的所有对象都已经被清除
                          2.加载该类的 ClassLoader 已经被回收
                          3.该类的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。
              堆内存调优：
                -Xms   设置初始分配大小，默认为物理内存的 1/64
                -Xmx   最大分配内存，默认为物理内存的 1/4
                -XX:+PrintGCdETAILS   输出详细gc日志
                在生产时   -Xms -Xmx要配置相等，以免内存有波动
              gc日志信息
                类别     young    yong区 gc的变化 yong区总大小       堆gc 变化大小  堆区大小               消耗时间
                GC       [PSYoungGen:  0K->0K(3584K)]                6893K->6893K(11776K), 0.0006941 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
    3.执行引擎
        interpreter 解释器   jitCompiler 即时编译器 Gc(垃圾回收)


    jvm 参数类型
        标配参数 例如：java -version
        X参数
            Xint  Xcomp -Xmixed
        XX参数
            boolean类型
                -XX:+/-  某个属性值  + 表示开启 -表示关闭
                jinfo工具的使用
                    jinfo -flag PrintGCDetails  2222 (查看2222进程编号是否使用了 PrintGCDetails 参数)
                    jinfo -flags 进程号
            kv设置类型
                -XX:属性key=属性值value
                    -Xms 相当于 XX:InitialHeapSize  -Xmx相当于 XX:MaxHeapSize
                    -Xss 线程栈的大小 相当于-XX:ThreadStackSize 默认为 512k~1024k
                    -Xmn 设置年轻代大小
          java -XX:PrintFlagInitial   参数初始值
          java -XX:PrintFinalInitial  参数修改后的值   :=  表示  jvm\人为 修改过
          java -XX:+PrintCommandLineFlags  看jvm 默认值
          java -XX:MetaSpaceSize 设置元空间大小
          java -XX:PrintGCDetails gc日志信息
          java -XX:SurvivoRatio  eden区占yong区默认为8:1:1。修改为4后则为 4:1:1,from 和 to 一直未1:1
          java -XX:NewRatio 配置yong:old 默认为1:2,设置为3   yong:old=1:3  设置的老年代的占比
          java -XX:MaxTenuringThreshold  yong到 tenure 最大次数 默认是15

       stackoverflowerror  : 栈溢出   递归
       outofmemoryerror:java heap space
       outofmemeoryerror:GC overhead limit exceeded  大部分的资源去gc了
       outofmemeoryerror：direct buffer memory   直接内存不足  主要发生在netty中，netty底层使用的是nio,他分配的是本地内存
                    当本地内存不足
       outofmemeoryerror:unable to create new native thread  创建太多线程
       outofmemeoryerror：metaspace

     垃圾回收器：就是垃圾算法的落地实现
        DefNew > Default New Generation  默认新生代
        tenured > old
        parNew  >parallel New Generation
        PSYoungGen >  parallel Scavenge
        ParOldGen > parallel old Generation
        新生代垃圾收集器
            Serial 垃圾收集器（单线程）
            只开启一条 GC 线程进行垃圾回收，并且在垃圾收集过程中停止一切用户线程(Stop The World)。
            一般客户端应用所需内存较小，不会创建太多对象，而且堆内存不大，因此垃圾收集器回收时间短，
            即使在这段时间停止一切用户线程，也不会感觉明显卡顿。因此 Serial 垃圾收集器适合客户端使用。
            由于 Serial 收集器只使用一条 GC 线程，避免了线程切换的开销，从而简单高效。

            ParNew 垃圾收集器（多线程）
                ParNew 是 Serial 的多线程版本。由多条 GC 线程并行地进行垃圾清理。但清理过程依然需要 Stop The World。
                ParNew 追求“低停顿时间”,与 Serial 唯一区别就是使用了多线程进行垃圾收集，
                在多 CPU 环境下性能比 Serial 会有一定程度的提升；但线程切换需要额外的开销，因此在单 CPU 环境中表现不如 Serial。

            Parallel Scavenge 垃圾收集器（多线程）
                Parallel Scavenge 和 ParNew 一样，都是多线程、新生代垃圾收集器。但是两者有巨大的不同点：

                Parallel Scavenge：追求 CPU 吞吐量，能够在较短时间内完成指定任务，因此适合没有交互的后台计算。
                ParNew：追求降低用户停顿时间，适合交互式应用。
                吞吐量 = 运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)

                追求高吞吐量，可以通过减少 GC 执行实际工作的时间，然而，仅仅偶尔运行 GC 意味着每当 GC 运行时将有许多工作要做，因为在此期间积累在堆中的对象数量很高。单个 GC 需要花更多的时间来完成，从而导致更高的暂停时间。而考虑到低暂停时间，最好频繁运行 GC 以便更快速完成，反过来又导致吞吐量下降。

                通过参数 -XX:GCTimeRadio 设置垃圾回收时间占总 CPU 时间的百分比。
                通过参数 -XX:MaxGCPauseMillis 设置垃圾处理过程最久停顿时间。
                通过命令 -XX:+UseAdaptiveSizePolicy 开启自适应策略。我们只要设置好堆的大小和 MaxGCPauseMillis 或 GCTimeRadio，收集器会自动调整新生代的大小、Eden 和 Survivor 的比例、对象进入老年代的年龄，以最大程度上接近我们设置的 MaxGCPauseMillis 或 GCTimeRadio。
        老年代垃圾收集器
            Serial Old 垃圾收集器（单线程）
                Serial Old 收集器是 Serial 的老年代版本，都是单线程收集器，只启用一条 GC 线程，都适合客户端应用。
                它们唯一的区别就是：Serial Old 工作在老年代，使用“标记-整理”算法；Serial 工作在新生代，使用“复制”算法。

            Parallel Old 垃圾收集器（多线程）
                Parallel Old 收集器是 Parallel Scavenge 的老年代版本，追求 CPU 吞吐量。

            CMS 垃圾收集器（互联网项目一般选用这个）   paraNew + cms
                CMS(Concurrent Mark Sweep，并发标记清除)收集器是以获取最短回收停顿时间为目标的收集器（追求低停顿），
                它在垃圾收集时使得用户线程和 GC 线程并发执行，因此在垃圾收集过程中用户也不会感到明显的卡顿。

                初始标记：Stop The World，仅使用一条初始标记线程对所有与 GC Roots 直接关联的对象进行标记。
                并发标记：使用多条标记线程，与用户线程并发执行。此过程进行可达性分析，标记出所有废弃对象。速度很慢。
                重新标记：Stop The World，使用多条标记线程并发执行，将刚才并发标记过程中新出现的废弃对象标记出来。
                并发清除：只使用一条 GC 线程，与用户线程并发执行，清除刚才标记的对象。这个过程非常耗时。
                并发标记与并发清除过程耗时最长，且可以与用户线程一起工作，
                因此，总体上说，CMS 收集器的内存回收过程是与用户线程一起并发执行的。

            CMS 的缺点：
                吞吐量低
                无法处理浮动垃圾，导致频繁 Full GC
                使用“标记-清除”算法产生碎片空间
                对于产生碎片空间的问题，可以通过开启 -XX:+UseCMSCompactAtFullCollection，
                在每次 Full GC 完成后都会进行一次内存压缩整理，
                将零散在各处的对象整理到一块。设置参数 -XX:CMSFullGCsBeforeCompaction告诉 CMS，
                经过了 N 次 Full GC 之后再进行一次内存整理。

            G1 通用垃圾收集器
             G1 是一款面向服务端应用的垃圾收集器，它没有新生代和老年代的概念，而是将堆划分为一块块独立的 Region。
             当要进行垃圾收集时，首先估计每个 Region 中垃圾的数量，每次都从垃圾回收价值最大的 Region 开始回收，
             因此可以获得最大的回收效率。
                -XX:MaxGCPauseMills  预期停顿时间 相比较于cms 没碎片

            从整体上看， G1 是基于“标记-整理”算法实现的收集器，从局部（两个 Region 之间）上看是基于“复制”算法实现的，
            这意味着运行期间不会产生内存空间碎片。

            这里抛个问题👇
            一个对象和它内部所引用的对象可能不在同一个 Region 中，那么当垃圾回收时，
            是否需要扫描整个堆内存才能完整地进行一次可达性分析？

            并不！每个 Region 都有一个 Remembered Set，用于记录本区域中所有对象引用的对象所在的区域，进行可达性分析时，
            只要在 GC Roots 中再加上 Remembered Set 即可防止对整个堆内存进行遍历。

            如果不计算维护 Remembered Set 的操作，G1 收集器的工作过程分为以下几个步骤：

            初始标记：Stop The World，仅使用一条初始标记线程对所有与 GC Roots 直接关联的对象进行标记。
            并发标记：使用一条标记线程与用户线程并发执行。此过程进行可达性分析，速度很慢。
            最终标记：Stop The World，使用多条标记线程并发执行。
            筛选回收：回收废弃对象，此时也要 Stop The World，并使用多条筛选回收线程并发执行。


jvmGC+Springboot 微服务的生成和调参优化

