
//jvm
    内存与垃圾回收
    字节码与类的加载
    性能监控与调优
    大厂面试

    1.类加载系统    读取class文件
        1.三种类加载器   引导类加载器(bootstrapClassLoader)\扩展类加载器\系统类加载器
             bootStrap  classloader是c/c++ 写的  因此不能java代码不能获取到   用来加载java核心库
             扩展类加载器  和 系统类加载器(应用程序类加载器)  都是继承于classloader
             扩展类加载器 加载 ext文件夹下的类名
             自定义类获取都都是系统类加载器
                 自定义类加载器的应用场景 防止其他人根据字节码文件进行反编译  可以添加解密功能
                 自定义类的加载器  可以继承classloader 重写 findClass 方法
         2.双亲委派机制
             看上一级是否加载  具体到例子中就是   首先是系统类加载器  询问 扩展类加载器   扩展类加载器询问引导类加在器
             引导类加载器(不加载)  ---> 扩展类加载器(不加载)--->系统类加载器
             优势： 防止类的重复加载,保护核心代码不被篡改
                    比如:自己自定义 java.lang.String类  如果没有双亲委派机制
                    那么会加载自定义的String类 这就破坏了核心类的完整性
    2.运行时数据区   堆  栈  方法区(实现)  本地方法区  pc寄存器
        (1)pc寄存器  保存的是下一指令的地址  线程私有   每个线程都有一个pc寄存器  记录各自下一个指令的地址
        (2)栈  线程私有  保存一个个栈帧  栈帧对应的是一个个方法  不存在gc 有可能oom(out of memory)
           1.出现 stackoverflow  或 outofmemory  异常怎么解决
            调整 栈的大小  使用-Xss
           2.栈帧的内部结构
                局部变量表(local variable)
                  数字数组  存储单位 slot
                操作数栈(operand stack)
                动态链接(dynamic linking)  运行时常量的引用
                    指向运行时常量池中方法的引用
                方法返回地址   方法正常退出或异常退出的定义
                一些附加信息
        (3)堆
          线程共享 调整堆的大小 -Xms
          工具命令行： jps、jconsole、jmap -heap 进程号、jvisualVm
          结构：
            新生代：
                伊甸园(eden)
                幸存者0区(survivor 0)
                幸存者1区(survivor 1)
            老年代(tenure)：
            元空间(永久 1.8以前)：
            eden的gc为ygc(轻gc), tenure 为fullgc(重gc)
        (4)方法区：
              class   classLoader 常量池
              方法区的实现  1.8以前 永久代 1.8 元空间
              查看字节码
              javap -v .class
              StringTable  是在运行时常量池中 存储的是指向String对象的索引，真实对象还是存储在堆中。

    3.执行引擎
        interpreter 解释器   jitCompiler 即时编译器 Gc 垃圾回收
